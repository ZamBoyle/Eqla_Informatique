L'hexadécimal
=============
Nous avons vu précédemment les conversions du décimal vers le binaire et du binaire vers le décimal.
Maintenant, il existe une base qui est fort utilisée en informatique: l'hexadécimal qui est en fait une base 16.

Vous l'avez déjà vue peut-être pour donner une couleur dans un logiciel de dessin. On peut en effet donner une couleur via son code RGB (RGB=Red Green Blue). On donne trois nombres décimaux [Un pour le R, un pour le G, un pour le R] allant de 0 jusqu'à 255) ou bien trois valeurs hexadécimales. Par exemple le rouge, c'est le triplet RGB(255, 0, 0). En hexadécimal c'est RGB(0xFF, 0x00, 0x00) qu'on note alors #FF0000 dans le cas des couleurs. Vous le verrez peut-être avec Serge avec le CSS et les couleurs. Tiens c'est bizarre on a des lettres en hexadécimal comment ça se fait ?
Car on a des chiffres de 0 à 9 et puis des lettres allant de A à F. En effet, nous n'avons pas de chiffre supérieur à 9 en base 10. C'est pourquoi on utilise alors des lettres pour représenter des valeurs > 9.
On va faire correspondre les nombres décimaux allant de 0 à 15 avec leur représentation en hexa et en binaire. Je vais faire exprès d'ajouter des zéros devant certains nombres binaires. Vous comprendrez plus tard pourquoi.
0  = 0 = 0000
1  = 1 = 0001
2  = 2 = 0010
3  = 3 = 0011
4  = 4 = 0100
5  = 5 = 0101
6  = 6 = 0110
7  = 7 = 0111
8  = 8 = 1000
9  = 9 = 1001
10 = A = 1010
11 = B = 1011
12 = C = 1100
13 = D = 1101
14 = E = 1110
15 = F = 1111

Conversion Binaire => hexadécimal
=================================
À un chiffre dans la base 16, correspondent exactement quatre chiffres en binaire.
Soit 110011110111, on cherche des groupes de 4 bits en partant par la droite:
1100 = C 
1111 = F
0111 = 7
110011110111 = CF7

Soit 1100101011001010
1100 = C
1010 = A
1100 = C
1010 = A
1100101011001010 = CACA

Soit 11111 = 00011111 
0001 = 1
1111 = F
11111 = 1F

Conversion hexadécimal -> binaire
=================================
Soit 1F
1 = 1 en binaire
F = 1111
11111

Soit ABCDEF
A = 1010
B = 1011
C = 1100
D = 1101
E = 1110
F = 1111
ABCDEF = 1010 1011 1100 1101 1110 1111

Soit DADA
D = 1101
A = 1010
DADA = 1101 1010 1101 1010

Conversion hexadécimal -> décimal
=================================
Pour convertir un nombre binaire en décimal, on calculait une somme de puissances de 2.
Ici, pour convertir un nombre hexadécimal en décimal, on va calculer une somme de puissances de 16.
Soit 1F 
1F = 1 * 16E1 + F * 16E0
1F = 16 + 15
1F = 31

Soit B2C
B2C = 11 * 16E2 + 2 * 16E1 + 12 * 16E0
B2C = 11 * 256 + 32 + 12
B2C = 2816 + 32 + 12
B2C = 2860

Conversion décimal -> hexadécimal
==================================
Pour convertir un nombre décimal en binaire, on essayait de décomposer notre nombre en une somme de multiple de 2.
Pour la conversion d'un nombre décimal en hexadécimal, on décompose notre nombre décimal en une somme de multiple de 16.
16E0 = 1
16E1 = 16
16E2 = 256
16E3 = 4096

Soit 45
45 = 2 * 16E1 + 13 * 16E0
45 = 2D  car 13 = D

Soit 125
124 = 7 * 16E1 + 12 * 16E0
125 = 7 + 12
125 = 7C car 12 = C

Utilisations de l'hexadécimal
=============================
Alors on n'a pas inventé l'hexadécimal seulement pour les couleurs. On utilise aussi l'hexadécimal pour ce qu'on appelle l'adressage mémoire.
En effet chaque caractère stocké en mémoire l'est dans ce qu'on appelle une adresse mémoire.

avec deux chiffres Hexa je peux représenter combien de valeurs différentes possible puis-je avoir ?
Ca revient à dire que c'est 16 x 16 = 256 tout comme 2E8 = 1 Octet = 8 bits et comme on groupe par 4 un chiffre hexadecimal 2 groupes de 4 bits = 2 chiffres hexadécimaux.

1 octet = 2 chiffres hexadécimaux

4 octets = 8 chiffres hexadécimaux

8 chiffres hexadécimaux (4 octets) , 10 chiffres hexadécimaux (5 octets) ou 16 chiffres hexadécimaux (8 octets).

Une adresse est souvent codée sous forme de 8 chiffres hexadécimaux (4 octets) dans le cas d'une architecture 32 bits. Donc 2E32 octets accessibles pour stocker en mémoire.

La taille maximale d'une mémoire est fonction de ce qu'on appelle l'architecture: (32bits ou 64 bits)
================================================================================
1) Dans le cas d'une architecture 32 bits.
On peut adresser 2E32 octets en mémoire = 4 294 967 296 octets adressables
En go comment on calcule ?
2E32 octets = 4 294 967 296  octets
(4294967296 octets)/1024 = 4 194 304 ko (ko = kilo octets = 1024 octets)
(4194304 ko)/1024 = 4096 mo (mo = mega octets = 1024 ko)
(4096 mo)/1024 = 4 go (go = gia octets = 1024 mo)

Cependant on a trouvé une technique pour bypasser la limite des 4GB mais il faut que le CPU et l'OS supporte le PAE (Phyical Adress Extension) pour utiliser au-delà des 4GB de limitation.

C'est pour ça qu'une version 64 bits de Windows est plus appropriée qu'une 32 bits rien que pour la gestion de la quantité de mémoire.

2) Dans le cas d'une architecture 64 bits.
On peut adresse 2E64 octets en mémoire = 18446744073709551616 octets adressables = 17179869184 go = 16777216  to = 16384 petaoctets  = 16 exaoctets. Gloupsssssss !

Unités sur les octets
======================
1 ko = 1024 octets comme vu précédemment cependant beaucoup de personnes n'ont pas aimé d'utiliser 1024 au lieu de 1000.
Depuis 1998, on devrait utiliser 1000 au lieu de 1024. 
On devrait dire à la place kio (kibit-octet), mio (mébi), gio, tio...
Peu de personnes le font en informatique SAUF les vendeurs de disques durs :)

Pourquoi ?
Prenons un disque dur de 100 Go = 100 x 1000 mo = 100 000 x 1000 ko = 100 000 000 x 1000 octets = 100 000 000 000 octets
En fait, il ne fait que 93 Gio car 100 000 000 000 octets = 97 656 250 kio  = 95 367 mio = 93 gio

Mon disque dur à la maison indique: 999.639.076.864 octets = 930 gio mais le constructeur indique 1 To car 999 go = +/- 1 To